title: Artwork
description: >
  serves as the cornerstone of the artwork database, capturing comprehensive details of each piece. It includes essential identification details like catalog numbers and titles. Additionally, it encompasses categorical classifications, pertinent dates, mediums, and precise measurements. This table also establishes connections to related data such as series, exhibitions, publications, current location, thus forming a central repository that not only chronicles the artwork's intrinsic properties but also its relationships within the larger collection.

erd_link: assets/images/artwork_tables.png

include_id: true

fields:

  - name: catalog_number
    data_type: CHAR(14)
    description: Generated by catalog_number function
    constraints: NOT NULL, UNIQUE
    keys: 
    indexed: indexed
    default_value:

  - name: title
    data_type: VARCHAR(255)
    description: Title of the artwork
    constraints: NOT NULL
    keys: 
    indexed: 
    default_value: "'Untitled'"

  - name: series_id
    data_type: INT
    description: REF <a href=#><code>series(id)</code></a>
    constraints: 
    keys: FK
    indexed: indexed
    default_value:

  - name: category
    data_type: <a href=#><code>artwork_category</code></a>
    description: Category of the artwork
    constraints: NOT NULL
    keys: 
    indexed: 
    default_value:

  - name: date_started
    data_type: DATE
    description: Date when the creation of the artwork started
    constraints: "<= CURRENT_DATE AND <= date_completed"
    keys: 
    indexed: 
    default_value: NULL

  - name: date_completed
    data_type: DATE
    description: Date when the artwork was completed
    constraints: "NOT NULL, <= CURRENT_DATE"
    keys: 
    indexed: 
    default_value: 

  - name: date_circa
    data_type: BOOLEAN
    description: Flag if date is approximate
    constraints: 
    keys: 
    indexed: 
    default_value: FALSE

  - name: height_in
    data_type: NUMERIC(8, 4)
    description: Height of the artwork in inches
    constraints: "NOT NULL, is_valid_fraction"
    keys: 
    indexed: 
    default_value: 

  - name: width_in
    data_type: NUMERIC(8, 4)
    description: Width of the artwork in inches
    constraints: "NOT NULL, is_valid_fraction"
    keys: 
    indexed: 
    default_value: 

  - name: depth_in
    data_type: NUMERIC(8, 4)
    description: Depth of the artwork in inches
    constraints: "(NOT NULL for sculptures), is_valid_fraction"
    keys: 
    indexed: 
    default_value: NULL

  - name: weight_lbs
    data_type: NUMERIC(5, 2)
    description: Weight of the artwork in pounds
    constraints: 
    keys: 
    indexed: 
    default_value: NULL

  - name: pieces_number
    data_type: INT
    description: Number of pieces for the artwork
    constraints: ">= 1"
    keys: 
    indexed: 
    default_value: 1

  - name: size_approximate
    data_type: BOOLEAN
    description: Flag if size is approximate
    constraints: 
    keys: 
    indexed: 
    default_value: FALSE

  - name: size_irregular
    data_type: BOOLEAN
    description: Flag if size is irregular
    constraints: 
    keys: 
    indexed: 
    default_value: FALSE

  - name: singular_attributes_id
    data_type: INT
    description: Reference to the singular attributes for artwork
    constraints: REF <a href=#><code>singular_attributes(id)</code></a>
    keys: FK
    indexed: indexed
    default_value: NULL

  - name: artwork_storage_id
    data_type: INT
    description: Reference to the artwork's storage location
    constraints: REF <a href=#><code>artwork_storage(id)</code></a>
    keys: FK
    indexed: indexed
    default_value: NULL

faq:
  - question: Why compartmentalize attributes into singular_attributes?
    answer: >
      The <code>singular_attributes</code> table is designed to store data such as signature status, availability, and condition. For un-editioned artworks, these attributes pertain to the individual piece and are linked directly at the `artwork` table level. In contrast, for editioned artworks, such attributes are specific to each piece within the edition and are therefore associated at the `edition` table level. This structure maintains data normalization, ensuring that each attribute is stored once, in its most relevant context, avoiding redundancy.
  
  - question: What is the difference between artwork_storage_id field and the artwork_location table?
    answer: >
      The artwork_storage_id field is used to record the location of the artwork in the studio. The artwork_location table is used to record the location of the artwork in terms of people and organizations (including the studio).